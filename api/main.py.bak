from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel

app = FastAPI()

# Add CORS middleware to allow frontend requests
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # In production, set this to your frontend URL
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Pydantic models for request/response
class RecommendationRequest(BaseModel):
    strategy: str

class TradeRequest(BaseModel):
    trade_id: str

# Dummy data structures
dummy_markets = [
    {"market": "ExampleEvent1", "price": 0.55},
    {"market": "ExampleEvent2", "price": 0.30},
]

dummy_recommendations = [
    {"market": "ExampleEvent1", "action": "Buy YES", "reason": "stub"},
    {"market": "ExampleEvent2", "action": "Sell NO", "reason": "stub"},
]

@app.get("/hello")
def read_root():
    """Test endpoint to verify frontend-to-backend integration"""
    return {"message": "Hello from FastAPI"}

@app.get("/api/health")
async def health_check():
    """Health check endpoint to verify the API is working"""
    return {"status": "ok", "message": "Kalshi Trading Assistant API is running"}

@app.get("/feed")
def get_trade_feed():
    """Return latest market feed (stub for now)."""
    return {"markets": dummy_markets}

@app.post("/recommendations")
def get_recommendations(req: RecommendationRequest):
    """Generate trade recommendations (stub logic)."""
    strategy = req.strategy
    # (In a later step we'll use OpenAI or AI agent here)
    return {"strategy": strategy, "recommendations": dummy_recommendations}

@app.post("/execute")
def execute_trade(req: TradeRequest):
    """Execute a trade (stub)."""
    # In a real implementation, place an order via Kalshi API
    return {"status": "executed", "trade_id": req.trade_id}

# This will be used by Vercel serverless functions
app_handler = app 